#!/bin/sh

set -eCu

VERSION="0.4.6"

OPTS=":hvlcrfs:d:t:"

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-"$HOME/.config"}
XDG_CACHE_HOME=${XDG_CACHE_HOME:-"$HOME/.cache"}

CONFIG_DIR="$XDG_CONFIG_HOME/xcolor"
CACHE_DIR="$XDG_CACHE_HOME/xcolor"

# Set this to hardcode a cpp preprocessor path for xrdb merge
# (ie xrdb -merge -cpp $XRDB_CPP ...)
XRDB_CPP=${XRDB_CPP:-""}

# Process list that xcolor will attempt to reload after a
# theme change. Will only reload if alive prior to execution
PROC_LIST="i3 bspwm sway polybar xmonad"

THEME=""
SAVE_DEL_THEME=""
CURR_THEME=""
THEME_PATH=""
THEMES_DIR="$CONFIG_DIR/themes"

FAV_PATH="$CONFIG_DIR/xcolor.favorites"

ARG_LIST=0
ARG_CURR=0
ARG_RAND=0
ARG_SAVE=0
ARG_DEL=0
ARG_FAV=0
ARG_VER=0

XRES_PATH="$HOME/.Xresources"
XRES_INCL="#include \"$CONFIG_DIR/x.colors\""

XRES_DEFS="
! xcolors

*.foreground:    FOREGROUND
*.background:    BACKGROUND
*.cursorColor:   CURSOR

*.color0:        COLOR0
*.color1:        COLOR1
*.color2:        COLOR2
*.color3:        COLOR3
*.color4:        COLOR4
*.color5:        COLOR5
*.color6:        COLOR6
*.color7:        COLOR7
*.color8:        COLOR8
*.color9:        COLOR9
*.color10:       COLOR10
*.color11:       COLOR11
*.color12:       COLOR12
*.color13:       COLOR13
*.color14:       COLOR14
*.color15:       COLOR15"

check_config_dir() {
    if   ! [  -d "$CONFIG_DIR" ]; then
        mkdir -p "$THEMES_DIR"
    elif ! [  -d "$THEMES_DIR" ]; then
        mkdir -p "$THEMES_DIR"
    fi
}

check_cache_dir() {
    if ! [ -d "$CACHE_DIR" ]; then
        mkdir "$CACHE_DIR"
    fi
    if   [ -f "$CACHE_DIR"/xcolor.sequence ]; then
        rm -f "$CACHE_DIR"/xcolor.sequence
    fi
    if   [ -f "$CACHE_DIR"/xcolor.rasi ]; then
        rm -f "$CACHE_DIR"/xcolor.rasi
    fi
    if   [ -f "$CACHE_DIR"/xcolor.py ]; then
        rm -f "$CACHE_DIR"/xcolor.py
    fi
    if   [ -f "$CACHE_DIR"/xcolor.zathura ]; then
        rm -f "$CACHE_DIR"/xcolor.zathura
    fi
}

usage() {
    printf "Usage: ./xcolor [options]
       -t (theme):      select theme
       -r (random):     select random theme
       -l (list):       list themes
       -c (current):    display current theme
       -s (save):       save theme to favorites
       -d (delete):     delete theme to favorites
       -f (favorites):  use favorite themes for query
       -v (version):    show xcolor version and exit
       -h (help):       show usage\n"
}

list_themes() {
    if [ "$ARG_FAV" -eq "0" ]; then
        if ! [ "$(find "$THEMES_DIR" -name "*.colors" -type f)" ]; then
            printf "no themes installed!\n"
        else
            find "$THEMES_DIR" -name "*.colors" -type f | sed "s/^.*\///; s/.colors//"
        fi
    else
        if [ -f "$FAV_PATH" ]; then
            cat "$FAV_PATH"
        fi
    fi
}

rand_theme() {
    if [ "$ARG_FAV" -eq "0" ]; then
        NUM_THEMES=$(find "$THEMES_DIR" -name "*.colors" -type f | wc -l)
        RAND=$(awk -v min="1" -v max="$NUM_THEMES" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        THEME=$(find "$THEMES_DIR" -name "*.colors" -type f | sed -n "$RAND"p | sed "s/^.*\///; s/.colors//")
        if [ "$THEME" = "$CURR_THEME" ]; then
            RAND=$(((RAND + 1) % NUM_THEMES))
            [ "$RAND" -eq "0" ] && RAND="$NUM_THEMES"
            THEME=$(find "$THEMES_DIR" -name "*.colors" -type f | sed -n "$RAND"p | sed "s/^.*\///; s/.colors//")
        fi
    else
        NUM_THEMES=$(wc -l < "$FAV_PATH")
        RAND=$(awk -v min=1 -v max="$NUM_THEMES" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        THEME=$(sed -n "$RAND"p "$FAV_PATH")
        if [ "$THEME" = "$CURR_THEME" ]; then
            RAND=$(((RAND + 1) % NUM_THEMES))
            [ "$RAND" -eq "0" ] && RAND="$NUM_THEMES"
            THEME=$(sed -n "$RAND"p "$FAV_PATH")
        fi
    fi

    printf "theme selected: $THEME\n"
}

get_curr_theme() {
    CURR_THEME=$(grep "!" "$CONFIG_DIR"/x.colors | sed "s/^.*: //") > /dev/null
}

check_save_del_arg() {
    # Check if argument was given
    if [ -z "$SAVE_DEL_THEME" ]; then
        get_curr_theme
        SAVE_DEL_THEME="$CURR_THEME"
    fi

    # Check if theme exists
    check_theme "$SAVE_DEL_THEME"
}

save_theme() {
    check_save_del_arg

    # Check if xcolor.favorites exists
    ! [ -f "$FAV_PATH" ] && touch "$FAV_PATH"

    # Check if theme is in favorites
    ! grep "^$SAVE_DEL_THEME$" "$FAV_PATH" > /dev/null
    if [ "$?" -eq "1" ]; then
        printf "error: $SAVE_DEL_THEME already in favorites\n"
        exit 1
    fi

    # Add theme to favorites
    echo "$SAVE_DEL_THEME" >> "$FAV_PATH"
    printf "$SAVE_DEL_THEME added to favorites\n"
}

del_theme() {
    check_save_del_arg

    # Check if xcolor.favorites exists
    if ! [ -f "$FAV_PATH" ]; then
        printf "error: $SAVE_DEL_THEME is not in favorites\n"
        exit 1
    fi

    # Check if theme is in favorites
    ! grep -w "^$SAVE_DEL_THEME$" "$FAV_PATH" > /dev/null
    if [ "$?" -ne "1" ]; then
         printf "error: $SAVE_DEL_THEME is not in favorites\n"
        exit 1
    fi

    # Remove theme from favorites
    sed "/^$SAVE_DEL_THEME$/d" "$FAV_PATH" > /tmp/xcolor.favorites
    rm -f "$FAV_PATH"
    mv /tmp/xcolor.favorites "$FAV_PATH"
     printf "$SAVE_DEL_THEME deleted from favorites\n"
}

parse_args() {
    # Parse loop
    while getopts "$OPTS" opt; do
        case "$opt" in
            l)
                ARG_LIST=1
                ;;
            c)
                ARG_CURR=1
                ;;
            r)
                ARG_RAND=1
                ;;
            f)
                ARG_FAV=1
                ;;
            v)
                ARG_VER=1
                ;;
            s)
                ARG_SAVE=1
                SAVE_DEL_THEME="$OPTARG"
                ;;
            d)
                ARG_DEL=1
                SAVE_DEL_THEME="$OPTARG"
                ;;
            t)
                THEME="$OPTARG"
                ;;
            \?|h)
                usage
                exit 2
                ;;
            : )
                case "$OPTARG" in
                    t )
                        printf "error: please select theme\n"
                        exit 1
                        ;;
                    s )
                        ARG_SAVE=1
                        ;;
                    d )
                        ARG_DEL=1
                        ;;
                esac
                ;;
         esac
    done
    [ "$OPTIND" -eq "1" ] && usage && exit 0
    shift $((OPTIND - 1));
}

exec_args() {
    if   [ "$ARG_SAVE" -eq 1 ]; then
        save_theme
        exit 0
    elif [ "$ARG_DEL" -eq 1 ]; then
        del_theme
        exit 0
    elif [ "$ARG_CURR" -eq 1 ]; then
        get_curr_theme
        printf "$CURR_THEME\n"
        exit 0
    elif [ "$ARG_LIST" -eq 1 ]; then
        list_themes
        exit 0
    elif [ "$ARG_VER"  -eq 1 ]; then
        printf "xcolor $VERSION\n"
        exit 0
    elif [ "$ARG_RAND" -eq 1 ]; then
        get_curr_theme
        rand_theme
    elif [ "$ARG_FAV" -eq 1 ]; then
        usage
        exit 1
    fi
}

check_theme() {
    THEME_PATH="$THEMES_DIR/$*.colors"

    if ! [ -f "$THEME_PATH" ]; then
        printf "error: $*.colors does not exist\n"
        exit 1
    fi
}

read_theme() {
    # Word splitting on the set command here is intentional
    while read -r LINE; do
        eval "$(echo "$LINE" | sed "s/\#define\s\+//; s/\s.*$//")"="$(echo "$LINE" | sed "s/^.*\s//")"
    done < "$THEME_PATH"
}

copy_theme() {
    rm -f "$CONFIG_DIR"/x.colors
    printf "! Current xcolor theme: %s\n\n" "$THEME" > "$CONFIG_DIR/x.colors"
    cat "$THEME_PATH" >> "$CONFIG_DIR"/x.colors
}

check_xres() {
    # Create .Xresources if not already there
    if ! [ -f "$XRES_PATH" ]; then
        touch "$XRES_PATH"
    fi

    # Add x.colors include path to xres if not already there
    ! grep "$XRES_INCL" "$XRES_PATH" > /dev/null
    if [ "$?" -ne "1" ]; then
        # TODO: Check return value of tmp file creation
        echo "$XRES_INCL" | cat - "$XRES_PATH" > /tmp/xcolor.xres
        mv /tmp/xcolor.xres "$XRES_PATH"
    fi

    # Add xcolor defines to xres if not already there
    ! grep "\*\.color[0-9]\+:\s\+COLOR[0-9]\+" "$XRES_PATH" > /dev/null
    if [ "$?" -ne "1" ]; then
        echo "$XRES_DEFS" >> "$XRES_PATH"
    fi
}

## Cache Functions ##

make_esc_seq() {
    echo "\
]4;0;$COLOR0\\\
]4;1;$COLOR1\\\
]4;2;$COLOR2\\\
]4;3;$COLOR3\\\
]4;4;$COLOR4\\\
]4;5;$COLOR5\\\
]4;6;$COLOR6\\\
]4;7;$COLOR7\\\
]4;8;$COLOR8\\\
]4;9;$COLOR9\\\
]4;10;$COLOR10\\\
]4;11;$COLOR11\\\
]4;12;$COLOR12\\\
]4;13;$COLOR13\\\
]4;14;$COLOR14\\\
]4;15;$COLOR15\\\
]10;$FOREGROUND\\\
]11;$BACKGROUND\\\
]12;$CURSOR\\\
]4;232;$BACKGROUND\\\
]4;256;$BACKGROUND\\\
]708;$BACKGROUND\\" > "$CACHE_DIR"/xcolor.sequence
}

make_rasi() {
    echo "\
* {
  foreground:    $FOREGROUND;
  background:    $BACKGROUND;
  cursor:        $CURSOR;
  color0:        $COLOR0; /* Black   (Normal) */
  color1:        $COLOR1; /* Red     (Normal) */
  color2:        $COLOR2; /* Yellow  (Normal) */
  color3:        $COLOR3; /* Green   (Normal) */
  color4:        $COLOR4; /* Blue    (Normal) */
  color5:        $COLOR5; /* Magenta (Normal) */
  color6:        $COLOR6; /* Cyan    (Normal) */
  color7:        $COLOR7; /* White   (Normal) */
  color8:        $COLOR8; /* Black   (Bright) */
  color9:        $COLOR9; /* Red     (Bright) */
  color10:       $COLOR10; /* Yellow  (Bright) */
  color11:       $COLOR11; /* Green   (Bright) */
  color12:       $COLOR12; /* Blue    (Bright) */
  color13:       $COLOR13; /* Magenta (Bright) */
  color14:       $COLOR14; /* Cyan    (Bright) */
  color15:       $COLOR15; /* White   (Bright) */
}" > "$CACHE_DIR"/xcolor.rasi
}

make_zathura() {
    printf "\
set completion-bg \"$BACKGROUND\"
set completion-fg \"$FOREGROUND\"
set completion-group-bg \"$BACKGROUND\"
set completion-group-fg \"$COLOR2\"
set completion-highlight-bg \"$FOREGROUND\"
set completion-highlight-fg \"$BACKGROUND\"

set recolor-lightcolor \"$BACKGROUND\"
set recolor-darkcolor \"$FOREGROUND\"

set default-bg \"$BACKGROUND\"

set inputbar-bg \"$BACKGROUND\"
set inputbar-fg \"$FOREGROUND\"

set notification-bg \"$BACKGROUND\"
set notification-fg \"$FOREGROUND\"
set notification-error-bg \"$COLOR1\"
set notification-error-fg \"$FOREGROUND\"
set notification-warning-bg \"$COLOR1\"
set notification-warning-fg \"$FOREGROUND\"

set statusbar-bg \"$BACKGROUND\"
set statusbar-fg \"$FOREGROUND\"

set index-bg \"$BACKGROUND\"
set index-fg \"$FOREGROUND\"
set index-active-bg \"$FOREGROUND\"
set index-active-fg \"$BACKGROUND\"

set render-loading-bg \"$BACKGROUND\"
set render-loading-fg \"$FOREGROUND\"\n" > "$CACHE_DIR"/xcolor.zathura
}

make_cache_files() {
    make_esc_seq
    make_rasi
    make_zathura
}

## Reload Functions ##

update_spicetify() {
    if command -v spicetify > /dev/null; then
        spicetify update > /dev/null
    fi
}

rel_tty() {
    for tty in /dev/pts/[0-9]*; do
        if [ -w "$tty" ]; then
            tr -d "\n" < "$CACHE_DIR"/xcolor.sequence > "$tty" &
        fi
    done
}

rel_xres() {
    if [ -z "$XRDB_CPP" ]; then
        xrdb -merge "$XRES_PATH" > /dev/null
    else
        xrdb -merge -cpp "${XRDB_CPP:-"default"}" "$XRES_PATH" > /dev/null
    fi
}

rel_i3() {
    i3-msg reload > /dev/null
}

rel_sway() {
    swaymsg reload > /dev/null
}

rel_bspwm() {
    bspc wm -r > /dev/null
}

rel_polybar() {
    pkill -USR1 -x polybar > /dev/null
}

rel_xmonad() {
    xmonad --restart > /dev/null
}

rel_if_alive() {
    if pgrep "$*" > /dev/null; then
        rel_"$*"
    fi
}

## Main ##

# Assemble and execute args
check_config_dir
parse_args "$@"
exec_args
check_theme "$THEME"

# Mandatory reloads
check_xres
copy_theme
rel_xres
update_spicetify

# If PID exists, reload
for proc in $PROC_LIST; do
    rel_if_alive "$proc"
done

# Update current TTYs
read_theme
check_cache_dir
make_cache_files
rel_tty

exit 0
