#!/bin/sh

set -eCu

OPTS=":hlcrfs:d:t:"

CONFIGDIR="$XDG_CONFIG_HOME/xcolor"
CACHEDIR="$XDG_CACHE_HOME/xcolor"

THEME=""
SAVE_DEL_THEME=""
CURRTHEME=""
THEMEPATH=""
THEMESDIR="$CONFIGDIR/themes"

FAVPATH="$CONFIGDIR/xcolor.favorites"

ARG_LIST=0
ARG_CURR=0
ARG_RAND=0
ARG_SAVE=0
ARG_DEL=0
ARG_FAV=0

XRESPATH="$HOME/.Xresources"
XRESINCL="#include \"$CONFIGDIR/x.colors\""

XRESDEFS="
! xcolors

*.foreground:    FOREGROUND
*.background:    BACKGROUND
*.cursorColor:   CURSOR

*.color0:        COLOR0
*.color1:        COLOR1
*.color2:        COLOR2
*.color3:        COLOR3
*.color4:        COLOR4
*.color5:        COLOR5
*.color6:        COLOR6
*.color7:        COLOR7
*.color8:        COLOR8
*.color9:        COLOR9
*.color10:       COLOR10
*.color11:       COLOR11
*.color12:       COLOR12
*.color13:       COLOR13
*.color14:       COLOR14
*.color15:       COLOR15"

check_config_dir() {
    if   ! [  -d "$CONFIGDIR" ]; then
        mkdir -p "$THEMESDIR"
    elif ! [  -d "$THEMESDIR" ]; then
        mkdir -p "$THEMESDIR"
    fi
}

check_cache_dir() {
    if ! [ -d "$CACHEDIR" ]; then
        mkdir "$CACHEDIR"
    fi
    if   [ -f "$CACHEDIR"/xcolor.sequence ]; then
        rm -f "$CACHEDIR"/xcolor.sequence
    fi
}

usage() {
    echo "Usage: ./xcolor [options]"
    echo "       -t (theme):      select theme"
    echo "       -r (random):     select random theme"
    echo "       -l (list):       list themes"
    echo "       -c (current):    display current theme"
    echo "       -s (save):       save theme to favorites"
    echo "       -d (delete):     delete theme to favorites"
    echo "       -f (favorites):  use favorite themes for query"
    echo "       -h (help):       show usage"
}

list_themes() {
    if [ "$ARG_FAV" -eq "0" ]; then
        if ! [ "$(find "$THEMESDIR" -name "*.colors" -type f)" ]; then
            echo "no themes installed!"
        else
            find "$THEMESDIR" -name "*.colors" -type f | sed "s/^.*\///; s/.colors//"
        fi
    else
        if [ -f "$FAVPATH" ]; then
            cat "$FAVPATH"
        fi
    fi
}

rand_theme() {
    if [ "$ARG_FAV" -eq "0" ]; then
        NUMTHEMES=$(find "$THEMESDIR" -name "*.colors" -type f | wc -l)
        RAND=$(awk -v min="1" -v max="$NUMTHEMES" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        THEME=$(find "$THEMESDIR" -name "*.colors" -type f | sed -n "$RAND"p | sed "s/^.*\///; s/.colors//")
    else
        NUMTHEMES=$(wc -l < "$FAVPATH")
        RAND=$(awk -v min=1 -v max="$NUMTHEMES" 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        THEME=$(sed -n "$RAND"p "$FAVPATH")
    fi

    echo "theme selected: $THEME"
}

# Change to get_curr_theme
get_curr_theme() {
    CURRTHEME=$(grep "!" "$CONFIGDIR"/x.colors | sed "s/^.*: //") > /dev/null
}

check_save_del_arg() {
    # Check if argument was given
    if [ -z "$SAVE_DEL_THEME" ]; then
        get_curr_theme
        SAVE_DEL_THEME="$CURRTHEME"
    fi

    # Check if theme exists
    check_theme "$SAVE_DEL_THEME"
}

save_theme() {
    check_save_del_arg

    # Check if theme is in favorites
    ! grep "^$SAVE_DEL_THEME$" "$FAVPATH" > /dev/null
    if [ "$?" -eq "1" ]; then
        echo "error: $SAVE_DEL_THEME already in favorites"
        exit 1
    fi

    # Add theme to favorites
    echo "$SAVE_DEL_THEME" >> "$FAVPATH"
    echo "$SAVE_DEL_THEME added to favorites"
}

del_theme() {
    check_save_del_arg

    # Check if xcolor.favorites exists
    if ! [ -f "$FAVPATH" ]; then
        echo "error: $SAVE_DEL_THEME is not in favorites"
        exit 1
    fi

    # Check if theme is in favorites
    ! grep -w "^$SAVE_DEL_THEME$" "$FAVPATH" > /dev/null
    if [ "$?" -ne "1" ]; then
        echo "error: $SAVE_DEL_THEME is not in favorites"
        exit 1
    fi

    # Remove theme from favorites
    sed "/^$SAVE_DEL_THEME$/d" "$FAVPATH" > /tmp/xcolor.favorites
    rm -f "$FAVPATH"
    mv /tmp/xcolor.favorites "$FAVPATH"
    echo "$SAVE_DEL_THEME deleted from favorites"
}

parse_args() {
    # Parse loop
    while getopts "$OPTS" opt; do
        case "$opt" in
            h )
                usage
                exit 0
                ;;
            l )
                ARG_LIST=1
                ;;
            c )
                ARG_CURR=1
                ;;
            r )
                ARG_RAND=1
                ;;
            f )
                ARG_FAV=1
                ;;
            s )
                ARG_SAVE=1
                SAVE_DEL_THEME="$OPTARG"
                ;;
            d )
                ARG_DEL=1
                SAVE_DEL_THEME="$OPTARG"
                ;;
            t )
                THEME="$OPTARG"
                ;;
            \? )
                usage
                exit 2
                ;;
            : )
                case "$OPTARG" in
                    t )
                        echo "error: please select theme"
                        exit 1
                        ;;
                    s )
                        ARG_SAVE=1
                        ;;
                    d )
                        ARG_DEL=1
                        ;;
                esac
                ;;
         esac
    done
    shift $((OPTIND - 1));
}

exec_args() {
    if   [ "$ARG_SAVE" -eq 1 ]; then
        save_theme
        exit 0
    elif [ "$ARG_DEL" -eq 1 ]; then
        del_theme
        exit 0
    elif [ "$ARG_CURR" -eq 1 ]; then
        get_curr_theme
        echo "$CURRTHEME"
        exit 0
    elif [ "$ARG_LIST" -eq 1 ]; then
        list_themes
        exit 0
    elif [ "$ARG_RAND" -eq 1 ]; then
        rand_theme
    fi
}

check_theme() {
    THEMEPATH="$THEMESDIR/$*.colors"

    if ! [ -f "$THEMEPATH" ]; then
        echo "error: $*.colors does not exist"
        exit 1
    fi
}

read_theme() {
    # Word splitting on the set
    # command here is intentional
    while read -r LINE; do
        eval "$(echo "$LINE" | sed "s/\#define\s\+//; s/\s.*$//")"="$(echo "$LINE" | sed "s/^.*\s//")"
    done < "$THEMEPATH"
}

make_esc_seq() {
    echo "\
]4;0;$COLOR0\\\
]4;1;$COLOR1\\\
]4;2;$COLOR2\\\
]4;3;$COLOR3\\\
]4;4;$COLOR4\\\
]4;5;$COLOR5\\\
]4;6;$COLOR6\\\
]4;7;$COLOR7\\\
]4;8;$COLOR8\\\
]4;9;$COLOR9\\\
]4;10;$COLOR10\\\
]4;11;$COLOR11\\\
]4;12;$COLOR12\\\
]4;13;$COLOR13\\\
]4;14;$COLOR14\\\
]4;15;$COLOR15\\\
]10;$FOREGROUND\\\
]11;$BACKGROUND\\\
]12;$CURSOR\\\
]4;232;$BACKGROUND\\\
]4;256;$BACKGROUND\\\
]708;$BACKGROUND\\" > "$CACHEDIR"/xcolor.sequence
}

update_tty() {
    for tty in /dev/pts/[0-9]*; do
        if [ -w "$tty" ]; then
            tr -d "\n" < "$CACHEDIR"/xcolor.sequence > "$tty" &
        fi
    done
}

check_xres() {
    # Create .Xresources if not already there
    if ! [ -f "$XRESPATH" ]; then
        touch "$XRESPATH"
    fi

    # Add x.colors include path to xres if not already there
    ! grep "$XRESINCL" "$XRESPATH" > /dev/null
    if [ "$?" -ne "1" ]; then
        # TODO: Check return value of tmp file creation
        echo "$XRESINCL" | cat - "$XRESPATH" > /tmp/xres-tmp
        mv /tmp/xres-tmp "$XRESPATH"
    fi

    # Add xcolor defines to xres if not already there
    ! grep "\*\.color[0-9]\+:\s\+COLOR[0-9]\+" "$XRESPATH" > /dev/null
    if [ "$?" -ne "1" ]; then
        echo "$XRESDEFS" >> "$XRESPATH"
    fi
}

copy_theme() {
    rm -f "$CONFIGDIR"/x.colors
    printf "! Current xcolor theme: %s\n\n" "$THEME" > "$CONFIGDIR/x.colors"
    cat "$THEMEPATH" >> "$CONFIGDIR"/x.colors
}

rel_xres() {
    xrdb "$XRESPATH" > /dev/null
}

rel_i3() {
    i3-msg reload  > /dev/null
}

rel_polybar() {
    pkill -USR1 polybar > /dev/null
}

rel_if_alive() {
    ! pgrep "$*" > /dev/null
    if [ "$?" -eq "1" ]; then
        rel_"$*"
    fi
}

# Assemble and execute args
check_config_dir
parse_args "$@"
exec_args
check_theme "$THEME"

# Mandatory reloads
check_xres
copy_theme
rel_xres

# If PID exists, reload
rel_if_alive "i3"
rel_if_alive "polybar"

# Update current TTYs
read_theme
check_cache_dir
make_esc_seq
update_tty
