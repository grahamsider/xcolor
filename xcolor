#!/bin/bash

set -eCu

# Force grep to be POSIX compliant
POSIXLY_CORRECT=1

SHORTOPTS="hlcrsdft:"
LONGOPTS="help,list,current,random,save,delete,favorites,theme:"

CONFIGDIR="$XDG_CONFIG_HOME/xcolor"
CACHEDIR="$XDG_CACHE_HOME/xcolor"

THEME=""
CURRTHEME=""
THEMEPATH=""
THEMESDIR="$CONFIGDIR/themes"

FAVPATH="$CONFIGDIR/favorites"

ARG_LIST=0
ARG_CURR=0
ARG_RAND=0
ARG_SAVE=0
ARG_DEL=0
ARG_FAV=0

XRESPATH="$HOME/.Xresources"
XRESINCL="#include \"$CONFIGDIR/x.colors\""

XRESDEFS="
! xcolors

*.foreground:    FOREGROUND
*.background:    BACKGROUND
*.cursorColor:   CURSOR

*.color0:        COLOR0
*.color1:        COLOR1
*.color2:        COLOR2
*.color3:        COLOR3
*.color4:        COLOR4
*.color5:        COLOR5
*.color6:        COLOR6
*.color7:        COLOR7
*.color8:        COLOR8
*.color9:        COLOR9
*.color10:       COLOR10
*.color11:       COLOR11
*.color12:       COLOR12
*.color13:       COLOR13
*.color14:       COLOR14
*.color15:       COLOR15"

check_config_dir() {
    if   ! [ -d $CONFIGDIR ]; then
        mkdir -p $THEMESDIR
    elif ! [ -d $THEMESDIR ]; then
        mkdir $THEMESDIR
    fi
}

check_cache_dir() {
    if ! [ -d $CACHEDIR ]; then
        mkdir $CACHEDIR
    fi
    if [ -f $CACHEDIR/xcolor.sequence ]; then
        rm -f $CACHEDIR/xcolor.sequence
    fi
}

usage() {
    echo "Usage: ./xcolor-load [options]"
    echo "       -t, --theme:      select theme"
    echo "       -r, --random:     select random theme"
    echo "       -l, --list:       list themes"
    echo "       -c, --current:    display current theme"
    echo "       -s, --save:       save theme to favorites"
    echo "       -d, --delete:     delete theme to favorites"
    echo "       -f, --favorites:  use favorite themes for query"
    echo "       -h, --help:       show usage"
}

list_themes() {
    if [ "$ARG_FAV" -eq "0" ]; then
        if ! [ "$(ls -A $THEMESDIR)" ]; then
            echo "no themes installed!"
        else
            ls -1 $THEMESDIR | sed --posix 's/.colors//'
        fi
    else
        if [ -f $FAVPATH ]; then
            cat $FAVPATH
        fi
    fi
}

rand_theme() {
    # TODO: Don't parse `ls`
    if [ "$ARG_FAV" -eq "0" ]; then
        NUMTHEMES=$(ls $THEMESDIR -1 | wc -l)
        RAND=$(awk -v min=1 -v max=$NUMTHEMES 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        THEME=$(ls $THEMESDIR | sed --posix -n $RAND\p | sed --posix 's/.colors//')
    else
        NUMTHEMES=$(cat $FAVPATH | wc -l)
        RAND=$(awk -v min=1 -v max=$NUMTHEMES 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
        THEME=$(cat $FAVPATH | sed --posix -n $RAND\p)
    fi

    echo "theme selected: $THEME"
}

# Change to get_curr_theme
get_curr_theme() {
    CURRTHEME="$(grep "!" $CONFIGDIR/x.colors | sed --posix 's/^.*: //')" > /dev/null
}

save_theme() {
    get_curr_theme
    ! grep -w "^$CURRTHEME$" $FAVPATH > /dev/null
    if [ "${PIPESTATUS[0]}" -eq "0" ]; then
        echo "error: $CURRTHEME already in favorites"
        exit 1
    fi
    echo $CURRTHEME >> $FAVPATH
    echo "$CURRTHEME added to favorites"
}

del_theme() {
    if ! [ -f $FAVPATH ]; then
        echo "error: $CURRTHEME is not in favorites"
        exit 1
    fi
    get_curr_theme
    ! grep -w "^$CURRTHEME$" $FAVPATH > /dev/null
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "error: $CURRTHEME is not in favorites"
        exit 1
    fi
    sed "/^$CURRTHEME$/d" $FAVPATH > /tmp/xcolor.favorites
    rm -f $FAVPATH
    mv /tmp/xcolor.favorites $FAVPATH
    echo "$CURRTHEME deleted from favorites"
}

parse_args() {
    # Check getopt(1) version
    ! getopt --test > /dev/null
    if [ "${PIPESTATUS[0]}" -ne "4" ]; then
        echo "error: incompatible getopt version -- please install enhanced getopt"
        exit 2
    fi

    # Assemble options
    ! OPTS=$(getopt --options $SHORTOPTS --long $LONGOPTS --name "$0" -- "$@")
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        exit 2
    fi
    eval "set -- $OPTS"

    if [ "$1" == "--" ]; then
        usage
    fi

    # Parse loop
    while true; do
        case "$1" in
            -h | --help)
                usage
                exit 0
                ;;
            -l | --list)
                ARG_LIST=1
                shift
                ;;
            -c | --current)
                ARG_CURR=1
                shift
                ;;
            -r | --random)
                ARG_RAND=1
                shift
                ;;
            -s | --save)
                ARG_SAVE=1
                shift
                ;;
            -d | --delete)
                ARG_DEL=1
                shift
                ;;
            -f | --favorites)
                ARG_FAV=1
                shift
                ;;
            -t | --theme)
                THEME="$2"
                shift 2
                ;;
            --)
                shift
                break
                ;;
            *)
                echo "*"
                exit 2
                ;;
         esac
    done
}

exec_args() {
    if   [ "$ARG_SAVE" -eq 1 ]; then
        save_theme
        exit 0
    elif [ "$ARG_DEL" -eq 1 ]; then
        del_theme
        exit 0
    elif [ "$ARG_CURR" -eq 1 ]; then
        get_curr_theme
        echo $CURRTHEME
        exit 0
    elif [ "$ARG_LIST" -eq 1 ]; then
        list_themes
        exit 0
    elif [ "$ARG_RAND" -eq 1 ]; then
        rand_theme
    fi
}

check_theme() {
    THEMEPATH="$THEMESDIR/$THEME.colors"

    if     [ -z "$THEME" ]; then
        echo "error: please select theme"
        exit 1
    elif ! [ -f "$THEMEPATH" ]; then
        echo "error: $THEMEPATH does not exist"
        exit 1
    fi
}

read_theme() {
    while read -r LINE; do
        set -- $LINE
        printf -v $2 "$3"
    done < $THEMEPATH
}

make_esc_seq() {
    echo -e "\
]4;0;$COLOR0\\\
]4;1;$COLOR1\\\
]4;2;$COLOR2\\\
]4;3;$COLOR3\\\
]4;4;$COLOR4\\\
]4;5;$COLOR5\\\
]4;6;$COLOR6\\\
]4;7;$COLOR7\\\
]4;8;$COLOR8\\\
]4;9;$COLOR9\\\
]4;10;$COLOR10\\\
]4;11;$COLOR11\\\
]4;12;$COLOR12\\\
]4;13;$COLOR13\\\
]4;14;$COLOR14\\\
]4;15;$COLOR15\\\
]10;$FOREGROUND\\\
]11;$BACKGROUND\\\
]12;$CURSOR\\\
]4;232;$BACKGROUND\\\
]4;256;$BACKGROUND\\\
]708;$BACKGROUND\\" > $CACHEDIR/xcolor.sequence
}

update_tty() {
    for tty in /dev/pts/[0-9]*; do
        if [ -w $tty ]; then
            cat $CACHEDIR/xcolor.sequence | tr -d "\n" > $tty &
        fi
    done
}

check_xres() {
    # Create .Xresources if not already there
    if ! [ -f $XRESPATH ]; then
        touch $XRESPATH
    fi

    # Add x.colors include path to xres if not already there
    ! grep "$XRESINCL" $XRESPATH > /dev/null
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        # TODO: Check return value of tmp file creation
        echo "$XRESINCL" | cat - $XRESPATH > /tmp/xres-tmp
        mv /tmp/xres-tmp $XRESPATH
    fi

    # Add xcolor defines to xres if not already there
    ! grep "*.color[0-9]\+:\s\+COLOR[0-9]\+" $XRESPATH > /dev/null
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "$XRESDEFS" >> $XRESPATH
    fi
}

copy_theme() {
    rm -f $CONFIGDIR/x.colors
    printf "! Current xcolor theme: $THEME\n\n" > $CONFIGDIR/x.colors
    cat $THEMEPATH >> $CONFIGDIR/x.colors
}

rel_xres() {
    xrdb $XRESPATH > /dev/null
}

rel_i3() {
    i3-msg reload  > /dev/null
}

rel_polybar() {
    pkill -USR1 polybar > /dev/null
}

rel_if_alive() {
    ! pgrep $@ > /dev/null
    if [ "${PIPESTATUS[0]}" -eq "0" ]; then
        rel_$@
    fi
}

# Assemble and execute args
check_config_dir
parse_args "$@"
exec_args
check_theme

# Mandatory reloads
check_xres
copy_theme
rel_xres

# If PID exists, reload
rel_if_alive "i3"
rel_if_alive "polybar"

# Update current TTYs
read_theme
check_cache_dir
make_esc_seq
update_tty
